diff --git a/node_modules/docker-compose-cdk/lib/.types-compat/ts3.9/resources/service-props/network-selection.d.ts b/node_modules/docker-compose-cdk/lib/.types-compat/ts3.9/resources/service-props/network-selection.d.ts
index 66d0a2f..e0d4b17 100644
--- a/node_modules/docker-compose-cdk/lib/.types-compat/ts3.9/resources/service-props/network-selection.d.ts
+++ b/node_modules/docker-compose-cdk/lib/.types-compat/ts3.9/resources/service-props/network-selection.d.ts
@@ -2,4 +2,5 @@ import type { INetwork } from '../network';
 export interface NetworkSelection {
     readonly network: INetwork;
     readonly ipV4Address?: string;
+    readonly aliases?: string[];
 }
diff --git a/node_modules/docker-compose-cdk/lib/resources/service-props/network-selection.d.ts b/node_modules/docker-compose-cdk/lib/resources/service-props/network-selection.d.ts
index 59c2c1a..9e16d0a 100644
--- a/node_modules/docker-compose-cdk/lib/resources/service-props/network-selection.d.ts
+++ b/node_modules/docker-compose-cdk/lib/resources/service-props/network-selection.d.ts
@@ -2,4 +2,5 @@ import type { INetwork } from '../network';
 export interface NetworkSelection {
     readonly network: INetwork;
     readonly ipV4Address?: `${number}.${number}.${number}.${number}`;
+    readonly aliases?: string[];
 }
diff --git a/node_modules/docker-compose-cdk/lib/resources/service.d.ts b/node_modules/docker-compose-cdk/lib/resources/service.d.ts
index 8956bef..950b4c5 100644
--- a/node_modules/docker-compose-cdk/lib/resources/service.d.ts
+++ b/node_modules/docker-compose-cdk/lib/resources/service.d.ts
@@ -7,9 +7,30 @@ export declare abstract class ServiceBase extends Resource implements IService {
     abstract readonly dnsNames: string[];
     protected constructor(scope: Construct, id: string, props?: ResourceOptions);
 }
-export interface ServiceProps {
+export interface HealthCheck {
+    readonly test: string[];
+    readonly interval?: string;
+    readonly timeout?: string;
+    readonly retries?: number;
+    readonly startPeriod?: string;
+    readonly startInterval?: string;
+    readonly disable?: boolean;
+}
+export interface DisabledHealthCheck {
+    readonly disable?: boolean;
+}
+export type DependencyCondition = 'service_started' | 'service_healthy' | 'service_completed_successfully';
+export interface Dependency {
+    readonly [serviceName: string]: {
+        readonly condition: DependencyCondition;
+    };
+}
+export interface BuildContext {
+    readonly context: string;
+    readonly dockerfile?: string;
+}
+export interface SharedServiceProps {
     readonly disabled?: boolean;
-    readonly image: IDockerImage;
     readonly user?: string | number;
     readonly privileged?: boolean;
     readonly restart?: RestartPolicy;
@@ -21,7 +42,18 @@ export interface ServiceProps {
     readonly networks?: Array<NetworkSelection>;
     readonly devices?: Array<DeviceMapping>;
     readonly command?: string;
+    readonly entrypoint?: string;
+    readonly healthCheck?: HealthCheck | DisabledHealthCheck | string;
+    readonly dependsOn?: Dependency;
+    readonly workingDir?: string;
+}
+export interface ImageServiceProps extends SharedServiceProps {
+    readonly image: IDockerImage;
+}
+export interface BuildServiceProps extends SharedServiceProps {
+    readonly build: BuildContext;
 }
+export type ServiceProps = ImageServiceProps | BuildServiceProps;
 export declare class Service extends ServiceBase {
     readonly dnsNames: string[];
     readonly disabled: boolean;
@@ -36,7 +68,13 @@ export declare class Service extends ServiceBase {
     readonly networks: Array<NetworkSelection> | undefined;
     readonly devices: Array<DeviceMapping> | undefined;
     readonly command: string | undefined;
+    readonly entrypoint: string | undefined;
     readonly user: string | number | undefined;
+    readonly healthCheck: HealthCheck | undefined;
+    readonly dependsOn: Dependency | undefined;
+    readonly workingDir: string | undefined;
+    readonly build: BuildContext | undefined;
     constructor(scope: Construct, id: string, props: ServiceProps);
+    addDependency(service: Service, condition?: DependencyCondition): void;
     render(): object;
 }
diff --git a/node_modules/docker-compose-cdk/lib/resources/service.js b/node_modules/docker-compose-cdk/lib/resources/service.js
index 7b507a3..b3ffa2c 100644
--- a/node_modules/docker-compose-cdk/lib/resources/service.js
+++ b/node_modules/docker-compose-cdk/lib/resources/service.js
@@ -19,7 +19,9 @@ ServiceBase[_a] = { fqn: "docker-compose-cdk.ServiceBase", version: "0.0.3" };
 class Service extends ServiceBase {
     constructor(scope, id, props) {
         super(scope, id);
+        this.workingDir = props.workingDir;
         this.disabled = props.disabled ?? false;
+        this.build = props.build;
         this.image = props.image;
         this.restart = props.restart;
         this.replicas = props.replicas ?? 1;
@@ -43,14 +45,37 @@ class Service extends ServiceBase {
         }));
         this.devices = props.devices;
         this.command = props.command;
+        this.entrypoint = props.entrypoint;
         this.user = props.user;
+        if (props.healthCheck !== undefined) {
+            const healthCheck = typeof props.healthCheck === 'string'
+                ? { test: props.healthCheck }
+                : props.healthCheck;
+            this.healthCheck = healthCheck;
+        }
+        if (props.dependsOn !== undefined) {
+            this.dependsOn = props.dependsOn;
+        }
+    }
+    addDependency(service, condition = 'service_started') {
+        if (this.dependsOn === undefined) {
+            this.dependsOn = {};
+        }
+        const otherServiceName = service.node.host.name;
+        this.dependsOn[otherServiceName] = { condition };
     }
     render() {
         return {
+            build: this.build ? {
+                context: this.build.context,
+                dockerfile: this.build.dockerfile,
+            } : undefined,
+            working_dir: this.workingDir,
             profiles: this.disabled ? ['disabled'] : undefined,
-            image: [this.image.image, this.image.tag ?? 'latest'].join(':'),
+            image: this.image ? [this.image.image, this.image.tag ?? 'latest'].join(':') : undefined,
             user: this.user,
             command: this.command,
+            entrypoint: this.entrypoint,
             privileged: this.privileged ?? false,
             restart: this.restart,
             deploy: {
@@ -88,12 +113,22 @@ class Service extends ServiceBase {
                 return Object.assign(map, {
                     [mapping.network.name]: {
                         ipv4_address: mapping.ipV4Address,
+                        aliases: mapping.aliases,
                     },
                 });
             }, {}),
             devices: this.devices?.map(mapping => {
                 return [mapping.source, mapping.target].join(':');
             }),
+            healthcheck: this.healthCheck === undefined ? undefined : (this.healthCheck === 'disabled' ? 'disabled' : {
+                test: this.healthCheck.test,
+                interval: this.healthCheck.interval,
+                timeout: this.healthCheck.timeout,
+                retries: this.healthCheck.retries,
+                start_period: this.healthCheck.startPeriod,
+                start_interval: this.healthCheck.startInterval,
+            }),
+            depends_on: this.dependsOn,
         };
     }
 }
